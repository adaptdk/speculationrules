---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/blog-placeholder-1.jpg" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link
  rel="preload"
  href="/fonts/atkinson-regular.woff"
  as="font"
  type="font/woff"
  crossorigin
/>
<link
  rel="preload"
  href="/fonts/atkinson-bold.woff"
  as="font"
  type="font/woff"
  crossorigin
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<base href={import.meta.env.BASE_URL} />

<script type="speculationrules">
  {
    "prerender": [
      {
        "eagerness": "immediate",
        "where": {
          "and": [
            { "href_matches": "/*" },
            { "selector_matches": ".prerender-immediate" },
            { "not": { "selector_matches": "no-prerender" } }
          ]
        }
      },
      {
        "eagerness": "moderate",
        "where": {
          "and": [
            { "href_matches": "/*" },
            { "selector_matches": ".prerender-moderate" },
            { "not": { "selector_matches": "no-prerender" } }
          ]
        }
      },
      {
        "eagerness": "conservative",
        "where": {
          "and": [
            { "href_matches": "/*" },
            { "selector_matches": ".prerender-conservative" },
            { "not": { "selector_matches": "no-prerender" } }
          ]
        }
      }
    ],
    "prefetch": [
      {
        "eagerness": "immediate",
        "where": {
          "and": [
            { "href_matches": "/*" },
            { "selector_matches": ".prefetch-immediate" },
            { "not": { "selector_matches": "no-prefetch" } }
          ]
        }
      },
      {
        "eagerness": "moderate",
        "where": {
          "and": [
            { "href_matches": "/*" },
            { "selector_matches": ".prefetch-moderate" },
            { "not": { "selector_matches": "no-prefetch" } }
          ]
        }
      },
      {
        "eagerness": "conservative",
        "where": {
          "and": [
            { "href_matches": "/*" },
            { "selector_matches": ".prefetch-conservative" },
            { "not": { "selector_matches": "no-prefetch" } }
          ]
        }
      }
    ]
  }
</script>
<script is:inline>
  const urlParams = new URLSearchParams(window.location.search);
  const blockFor = urlParams.get("blockFor");

  if (blockFor && parseInt(blockFor) > 0) {
    function sleep(ms) {
      const start = Date.now();
      while (Date.now() < start + ms) {}
    }

    const blockForMiliseconds = parseInt(blockFor);
    console.log("Blocking for", blockForMiliseconds);
    sleep(blockForMiliseconds);
    console.log("Done");
  }

  window.isPrerendered =
    document.prerendering ||
    self.performance?.getEntriesByType?.("navigation")[0]?.activationStart > 0;
  const prerender = urlParams.get("prerender");
  if (prerender) {
    window.speculation = `prerender: ${prerender}`;
  }
  const prefetch = urlParams.get("prefetch");
  if (prefetch) {
    window.speculation = `prefetch: ${prefetch}`;
  }
</script>
